-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS administrador.users
(
    id bigint NOT NULL,
    username character varying(60) NOT NULL,
    password character varying(255) NOT NULL,
    token character varying(255) NOT NULL,
    social_code bit varying(60) NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

COMMENT ON TABLE administrador.users
    IS ' Users';

CREATE TABLE IF NOT EXISTS administrador.customers
(
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    email character(60) NOT NULL,
    billing_address character(255) NOT NULL,
    rif_n character(20) NOT NULL,
    phone_code character(8) NOT NULL,
    phone integer NOT NULL,
    country character(255) NOT NULL,
    address character(255) NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.consumer
(
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    full_name character(60) NOT NULL,
    email character(60) NOT NULL,
    billing_address character(255),
    document character(60) NOT NULL,
    phone_code character(8) NOT NULL,
    phone integer NOT NULL,
    birht_date date NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.permissions
(
    id bigint NOT NULL,
    role_id bigint NOT NULL,
    permissions_name character(255) NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.company
(
    id bigint NOT NULL,
    customer_id bigint NOT NULL,
    rif_j character(20) NOT NULL,
    company_name character(40) NOT NULL,
    email character(60),
    phone_code character(8) NOT NULL,
    phone integer NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    CONSTRAINT id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.local
(
    id bigint NOT NULL,
    company_id bigint NOT NULL,
    local_name character(255) NOT NULL,
    name_location character(255) NOT NULL,
    phone_code character(8) NOT NULL,
    phone integer NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (company_id)
);

CREATE TABLE IF NOT EXISTS administrador.categories
(
    id bigint NOT NULL,
    name character(20) NOT NULL,
    description character(255) NOT NULL,
    thumbnail character(255),
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.products
(
    id bigint NOT NULL,
    sku character(60),
    name character(120) NOT NULL,
    price integer NOT NULL,
    weight integer,
    description character(255) NOT NULL,
    thumbnail character(120) NOT NULL,
    image character(120),
    category character(120) NOT NULL,
    stock character,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.options
(
    id bigint NOT NULL,
    option_name character NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.orders
(
    id bigint NOT NULL,
    consumer_id bigint NOT NULL,
    ammount integer NOT NULL,
    shipping_address character(255),
    order_address character(255),
    order_email character(60),
    order_date date NOT NULL,
    order_status integer NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.product_categories
(
    id bigint NOT NULL,
    option_id bigint NOT NULL,
    category_id bigint NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.product_options
(
    id bigint NOT NULL,
    option_id bigint NOT NULL,
    product_id bigint NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.orders_details
(
    id bigint NOT NULL,
    order_id bigint NOT NULL,
    product_id bigint NOT NULL,
    price integer NOT NULL,
    sku character,
    quantity integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.roles
(
    id bigint NOT NULL,
    role_name character(255) NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administrador.role_user
(
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    role_id bigint NOT NULL,
    create_at timestamp with time zone NOT NULL,
    update_at timestamp with time zone,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS administrador.customers
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES administrador.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.consumer
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES administrador.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.permissions
    ADD FOREIGN KEY (role_id)
    REFERENCES administrador.roles (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.company
    ADD CONSTRAINT customer_id FOREIGN KEY (customer_id)
    REFERENCES administrador.customers (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.local
    ADD CONSTRAINT company_id FOREIGN KEY (company_id)
    REFERENCES administrador.company (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.orders
    ADD CONSTRAINT consumer_id FOREIGN KEY (consumer_id)
    REFERENCES administrador.consumer (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.product_categories
    ADD CONSTRAINT option_id FOREIGN KEY (option_id)
    REFERENCES administrador.options (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.product_categories
    ADD CONSTRAINT category_id FOREIGN KEY (category_id)
    REFERENCES administrador.categories (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.product_options
    ADD CONSTRAINT option_id FOREIGN KEY (option_id)
    REFERENCES administrador.options (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.product_options
    ADD CONSTRAINT product_id FOREIGN KEY (product_id)
    REFERENCES administrador.products (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.orders_details
    ADD CONSTRAINT order_id FOREIGN KEY (order_id)
    REFERENCES administrador.orders (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.orders_details
    ADD CONSTRAINT product_id FOREIGN KEY (product_id)
    REFERENCES administrador.products (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.role_user
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES administrador.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS administrador.role_user
    ADD CONSTRAINT role_id FOREIGN KEY (role_id)
    REFERENCES administrador.roles (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

END;